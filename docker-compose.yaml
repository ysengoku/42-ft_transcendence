services:
  front:
    container_name: frontend
    build:
      context: ./front  # Contexte de la construction (répertoire contenant le Dockerfile de front)
      dockerfile: Dockerfile  # Fichier Dockerfile pour ce service
    volumes:
      - ./front/app:/app  # Monte le dossier front/app de l'hôte dans /app du conteneur
      - /app/node_modules   # Volume pour node_modules (cela permet de ne pas écraser le dossier node_modules)
      - ./front/app/dist:/app/dist
    ports:
      - "5173:5173"
    expose:
      - "5173"
    env_file:
      - .env
    depends_on:
      - back
    networks:
      - transcendance_network

  back:
    container_name: backend
    build:
      context: ./back  # Contexte de la construction (répertoire contenant le Dockerfile de back)
      dockerfile: Dockerfile  # Fichier Dockerfile pour ce service
    command: >
      sh -c "wait-for-it database:5432 -- python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            python manage.py createsuperuser --noinput || echo 'Superuser creation skipped' &&
            python manage.py runserver 0.0.0.0:8000"

    ports:
      - "8000:8000"
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: mySite.settings
      DATABASE_URL: ${DATABASE_URL}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
    depends_on:
      - database
    volumes:
      - ./back:/app
      - static_volume:/app/static
      - media_volume:/app/media
    networks:
      - transcendance_network

  database: 
    container_name: database
    build:
      context: ./database  # Contexte de la construction (répertoire contenant le Dockerfile pour la base de données)
      dockerfile: Dockerfile  # Fichier Dockerfile pour ce service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
    ports: # non exposé en prod, connecté par Django via postgres://user:password@db:5432/dbname
      - "5432:5432"
    expose:
      - "5432"
    networks:
      - transcendance_network

  nginx:
    container_name: server
    build:
      context: ./nginx
    volumes:
      - ./front/app/dist:/app/dist
      - media_volume:/app/media # Dossier contenant les fichiers médias de l'application
      - static_volume:/app/static # Dossier contenant les fichiers statiques de l'application
      - db_volume:/var/lib/postgresql/data # Dossier contenant les fichiers de la base de données
    ports:
      - "1026:1026"
    expose:
      - "1026"
    depends_on:
      - front
      - back
    networks:
      - transcendance_network

# shared volumes for all services, and between host and containers
volumes:
  db_volume:
    name: db_volume
    driver: local
    driver_opts:
      type: none
      device: ./volumes/db_volume
      o: bind
  static_volume:
    name: static_volume
    driver: local
    driver_opts:
      type: none
      device: ./volumes/static_volume
      o: bind
  media_volume:
    name: media_volume
    driver: local
    driver_opts:
      type: none
      device: ./volumes/media_volume
      o: bind
  
networks:
  transcendance_network:
    driver: bridge