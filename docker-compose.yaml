x-front-server-common-variables: &front-server-common-variables
  NODE_ENV: ${NODE_ENV:-development}  # defines whether the images run in production or development mode

services:
  front:
    container_name: front
    build:
      context: ./front
      dockerfile: Dockerfile
    volumes:
      - ./front/app/src:/app/src
    ports:
      - "5173:5173"
    expose:
      - "5173"
    env_file:
      - .env
    depends_on:
      - server
    networks:
      - transcendance_network
    environment:
       <<: *front-server-common-variables
    profiles:
      - development

  server:
    container_name: server
    build:
      context: ./server
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    ports:
      - "8000:8000"
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      <<: *front-server-common-variables
      DJANGO_SETTINGS_MODULE: server.settings
      DATABASE_URL: ${DATABASE_URL}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SECRET_KEY: ${SECRET_KEY}
      CRON_SECRET: ${CRON_SECRET}
      CRON_ENDPOINT: ${CRON_ENDPOINT}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server:/app
      - media_volume:/app/media
    networks:
      - transcendance_network
    stdin_open: true
    tty: true

  crontab:
    container_name: crontab
    build:
      context: ./crontab
      dockerfile: Dockerfile
    environment:
      CRON_SECRET: ${CRON_SECRET}
      CRON_ENDPOINT: ${CRON_ENDPOINT}
      CRON_CSRF_TOKEN: ${CRON_CSRF_TOKEN}
      PYTHONPATH: /app/server
      DJANGO_SETTINGS_MODULE: server.settings
    depends_on:
      - nginx
      - server
    volumes:
      - ./crontab:/app/crontab
      - ./crontab/scripts:/app/scripts
      - ./server:/app/server
    networks:
      - transcendance_network
    restart: on-failure

  database:
    container_name: database
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
    ports: # Not exposed in production, Django connects via postgres://user:password@db:5432/dbname
      - "5432:5432"
    expose:
      - "5432"
    networks:
      - transcendance_network
    healthcheck:
      # pg_isready is a utility for checking the status of the postgres connection
      test: ["CMD-SHELL", "pg_isready -p ${DATABASE_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 15

  nginx:
    container_name: nginx
    build:
      context: ./
      dockerfile: ./nginx/Dockerfile
      target: ${NODE_ENV:-development} # Use the 'dev' stage by default, or 'build' in production
    volumes:
      - media_volume:/app/media/
    ports:
      - "1026:1026"
    expose:
      - "1026"
    depends_on:
      server:
        condition: service_started
      front:
        condition: service_started
        required: false # `front` container is a part of development profile and is not used in production
    networks:
      - transcendance_network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
    - "6380:6379"
    volumes:
    - redis_data:/data
    networks:
      - transcendance_network
    healthcheck:
      # redis-cli ping returns exit status of 0 even when it fails, so grep to find the actual PONG response is necessary
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 3s
      timeout: 5s
      retries: 15

volumes:
  redis_data:
    name: redis_data
    
  db_volume:
    name: db_volume

  media_volume:
    name: media_volume

networks:
  transcendance_network:
    driver: bridge
