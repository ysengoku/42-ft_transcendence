services:
  front:
    container_name: front
    build:
      context: ./front
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development} # Utilise le stage 'dev' par défaut, ou 'build' en prod
    volumes:
      - ./front/app/src:/app/src
    ports:
      - "5173:5173"
    expose:
      - "5173"
    env_file:
      - .env
    depends_on:
      - server
    networks:
      - transcendance_network
    environment:
      - NODE_ENV=${NODE_ENV:-development}

  server:
    container_name: server
    build:
      context: ./server # Contexte de la construction (répertoire contenant le Dockerfile de server)
      dockerfile: Dockerfile # Fichier Dockerfile pour ce service
    command: >
      sh -c "python manage.py makemigrations --noinput &&
            python manage.py migrate --noinput &&
            python manage.py collectstatic --noinput &&
            python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: server.settings
      DATABASE_URL: ${DATABASE_URL}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - database
      - redis
    volumes:
      - ./server:/app
      - static_volume:/app/static
      - media_volume:/app/media
    networks:
      - transcendance_network
    stdin_open: true
    tty: true

  crontab:
    container_name: crontab
    build:
      context: ./crontab
      dockerfile: Dockerfile
    depends_on:
      - server
    networks:
      - transcendance_network

  database:
    container_name: database
    build:
      context: ./database # Contexte de la construction (répertoire contenant le Dockerfile pour la base de données)
      dockerfile: Dockerfile # Fichier Dockerfile pour ce service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
    ports: # non exposé en prod, connecté par Django via postgres://user:password@db:5432/dbname
      - "5432:5432"
    expose:
      - "5432"
    networks:
      - transcendance_network

  nginx:
    container_name: nginx
    build:
      context: ./nginx
    volumes:
      - ./front/app:/app/
      - media_volume:/app/media/ # Dossier contenant les fichiers médias de l'application
      - static_volume:/app/static/ # Dossier contenant les fichiers statiques de l'application
      - db_volume:/var/lib/postgresql/data/ # Dossier contenant les fichiers de la base de données
    ports:
      - "1026:1026"
    expose:
      - "1026"
    depends_on:
      - front
      - server
    networks:
      - transcendance_network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
    - "6380:6379"
    volumes:
    - redis_data:/data
    networks:
      - transcendance_network

# shared volumes for all services, and between host and containers. better to mount volumes without bind: docker managed the persistence
volumes:
  redis_data:
    name: redis_data
    
  db_volume:
    name: db_volume

  static_volume:
    name: static_volume

  media_volume:
    name: media_volume

networks:
  transcendance_network:
    driver: bridge
#Pour static_volume :

# Django collecte ses fichiers statiques dans ce volume via collectstatic
# Ces fichiers sont générés dynamiquement à partir de différentes applications Django
# Nginx a besoin d'accéder à ces fichiers pour les servir
# Le volume partagé permet à Django et Nginx d'accéder aux mêmes fichiers

# Pour media_volume :

# Les fichiers médias sont uploadés par les utilisateurs
# Django stocke ces fichiers dans ce volume
# Nginx doit pouvoir les servir
# Le volume est partagé car il est modifié dynamiquement (nouveaux uploads, suppressions, etc.)

# En contraste, pour les fichiers front :

# Ils sont statiques (définis à l'avance)
# Ne changent pas dynamiquement
# Peuvent être montés directement depuis le système de fichiers
# C'est pourquoi le montage direct suffit pour le front, mais les volumes partagés sont nécessaires pour le server et les médias.
